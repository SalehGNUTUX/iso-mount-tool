#!/bin/bash

# Initial settings
iso_dir="$HOME/iso"
mnt_dir="/mnt"
temp_file="/tmp/iso_selection.tmp"

# Enable case-insensitive matching
shopt -s nocasematch

# Function to display logo
display_logo() {
  echo -e "\033[1;36m"  # Cyan color
  cat << "EOF"
  ___
 |_ _|
  | |
  | |
 |___|       __  __
            |  \/  |
            | |\/| |
            | |  | |
            |_|  |_|        _____
                           |_   _|
                             | |
                             | |
                             |_|

EOF
  echo -e "\033[1;33m"  # Yellow color
  echo "Iso Manager Tool by GNUTUX"
  echo -e "\033[0m"     # Reset color
  sleep 1
}

# Function to check dependencies
check_dependencies() {
    missing=()
    
    # Basic dependencies
    if ! command -v zenity &> /dev/null; then
        missing+=("zenity (for GUI dialogs)")
    fi
    
    # Extraction dependencies
    if ! command -v 7z &> /dev/null; then
        missing+=("p7zip (for archive extraction)")
    fi
    
    # Mount dependencies
    if ! command -v mount &> /dev/null; then
        missing+=("mount (for ISO mounting)")
    fi
    
    if [ ${#missing[@]} -gt 0 ]; then
        zenity --error --text="Missing dependencies:\n\n${missing[*]}\n\nPlease install them before proceeding." --width=400
        return 1
    fi
    return 0
}

# Function to show mounted files
show_mounted() {
    clear
    display_logo
    echo "
    ==============================
    |   Currently Mounted Files  |
    ==============================
    "
    mapfile -t mounted < <(findmnt -n -l -o TARGET | grep "$mnt_dir")

    if [ ${#mounted[@]} -eq 0 ]; then
        echo "    No files are currently mounted"
    else
        for ((i=0; i<${#mounted[@]}; i++)); do
            echo "    $((i+1)). ${mounted[$i]}"
        done
    fi

    echo "
    ==============================
    Press Enter to continue...
    "
    read
}

# Function to unmount ISO
unmount_iso() {
    while true; do
        clear
        display_logo
        mapfile -t mounted < <(findmnt -n -l -o TARGET | grep "$mnt_dir")

        echo "
        ==============================
        |     Unmount ISO File      |
        ==============================
        | Currently Mounted Files: |
        "

        if [ ${#mounted[@]} -eq 0 ]; then
            echo "        No files are mounted"
        else
            for ((i=0; i<${#mounted[@]}; i++)); do
                echo "        $((i+1)). ${mounted[$i]}"
            done
        fi

        echo "
        ==============================
        | 1. Unmount file           |
        | 0. Back                   |
        ==============================
        "
        read -p "Choose option [0-1]: " sub_choice

        case $sub_choice in
            1)
                if [ ${#mounted[@]} -gt 0 ]; then
                    read -p "Enter file number: " file_num
                    if [[ $file_num -ge 1 && $file_num -le ${#mounted[@]} ]]; then
                        mount_point="${mounted[$((file_num-1))]}"
                        if sudo umount "$mount_point"; then
                            sudo rmdir "$mount_point"
                            echo "Successfully unmounted"
                        else
                            echo "Failed to unmount!"
                        fi
                        sleep 1
                    else
                        echo "Invalid number!"
                        sleep 1
                    fi
                else
                    echo "No files are mounted!"
                    sleep 1
                fi
                ;;
            0)
                return
                ;;
            *)
                echo "Invalid choice!"
                sleep 1
                ;;
        esac
    done
}

# Function to select ISO file
select_iso_file() {
    selected=$(zenity --file-selection \
        --title="Select ISO or IMG file" \
        --file-filter="Disk files | *.iso *.img *.ISO *.IMG" \
        --filename="$iso_dir/" 2>/dev/null)

    [ -z "$selected" ] && return 1

    iso_dir=$(dirname "$selected")
    echo "$selected" > "$temp_file"
}

# Main mount function
mount_iso() {
    while true; do
        clear
        display_logo
        echo "
        ==============================
        |        Mount ISO File      |
        ==============================
        | 1. Select ISO to mount     |
        | 2. Show mounted files     |
        | 0. Back                   |
        ==============================
        "
        read -p "Choose option [0-2]: " choice

        case $choice in
            1)
                if select_iso_file; then
                    iso_path=$(cat "$temp_file")
                    mount_point="$mnt_dir/$(basename "$iso_path" | cut -d. -f1)"

                    sudo mkdir -p "$mount_point"
                    if sudo mount -o loop "$iso_path" "$mount_point"; then
                        zenity --info --text="File successfully mounted at: $mount_point" --width=300
                    else
                        zenity --error --text="Failed to mount file!" --width=200
                    fi
                fi
                ;;
            2)
                show_mounted
                ;;
            0)
                return
                ;;
            *)
                echo "Invalid choice!"
                sleep 1
                ;;
        esac
    done
}

# ISO extraction function
extract_iso() {
    # Check for extraction dependency
    if ! command -v 7z &> /dev/null; then
        zenity --error --text="7z tool not installed!\n\nPlease install with:\n\nsudo apt install p7zip-full   # Ubuntu/Debian\nsudo yum install p7zip        # RHEL/CentOS" --width=500
        return
    fi

    clear
    display_logo
    echo "
    ==============================
    |      Extract ISO File      |
    ==============================
    "
    if select_iso_file; then
        iso_path=$(cat "$temp_file")
        echo "
        ==============================
        | 1. Extract here           |
        | 2. Extract to folder      |
        | 0. Back                   |
        ==============================
        "
        read -p "Choose option [0-2]: " extract_choice

        case $extract_choice in
            1)
                output_dir="$(dirname "$iso_path")/$(basename "$iso_path" .iso)_extracted"
                ;;
            2)
                output_dir=$(zenity --file-selection --directory --title="Select destination folder" 2>/dev/null)
                [ -z "$output_dir" ] && return
                ;;
            0)
                return
                ;;
            *)
                echo "Invalid choice!"
                sleep 1
                return
                ;;
        esac

        # Check if target directory exists and has files
        if [ -d "$output_dir" ] && [ "$(ls -A "$output_dir")" ]; then
            choice=$(zenity --list --title="Existing Files" --text="Target folder contains existing files:" --column="Option" "Overwrite all" "Skip existing" "Cancel operation" --width=400 --height=200)
            
            case $choice in
                "Overwrite all")
                    rm -rf "${output_dir:?}/"*
                    ;;
                "Skip existing")
                    extract_option="-aou"
                    ;;
                "Cancel operation"|*)
                    return
                    ;;
            esac
        else
            mkdir -p "$output_dir"
        fi

        echo "Extracting, please wait..."
        
        if 7z x "$iso_path" -o"$output_dir" $extract_option >/dev/null 2>&1; then
            zenity --info --text="Successfully extracted to: $output_dir" --width=400
        else
            zenity --error --text="Extraction failed!" --width=200
        fi
    fi
    # Auto-return after completion
    sleep 1
}

# ISO directory setup
setup_iso_dir() {
    while true; do
        clear
        display_logo
        echo "
        ==============================
        |      ISO Folder Setup     |
        ==============================
        | 1. Create new ISO folder  |
        | 2. Open file manager      |
        | 0. Back                   |
        ==============================
        "
        read -p "Choose option [0-2]: " sub_choice

        case $sub_choice in
            1)
                mkdir -p "$iso_dir"
                zenity --info --text="Created folder: $iso_dir" --width=200
                ;;
            2)
                xdg-open "$iso_dir" &
                ;;
            0)
                return
                ;;
            *)
                echo "Invalid choice!"
                sleep 1
                ;;
        esac
    done
}

# Main menu
main_menu() {
    # Check dependencies on startup
    if ! check_dependencies; then
        echo "Missing dependencies prevent the tool from running."
        exit 1
    fi

    while true; do
        clear
        display_logo
        echo -e "\033[1;34m"
        cat << "EOF"
┌──────────────────────────────────────┐
│   Advanced ISO/IMG Management Tool   │
│  With easy interface and complete    │
│  features                            │
└──────────────────────────────────────┘
EOF
        echo "
        ==============================
        |     ISO Manager Tool       |
        ==============================
        | Current ISO path: $iso_dir
        ==============================
        | 1. Setup ISO folder       |
        | 2. Mount ISO file         |
        | 3. Unmount ISO file       |
        | 4. Show mounted files      |
        | 5. Extract ISO file        |
        | 0. Exit                    |
        ==============================
        "
        read -p "Choose option [0-5]: " choice

        case $choice in
            1) setup_iso_dir ;;
            2) mount_iso ;;
            3) unmount_iso ;;
            4) show_mounted ;;
            5) extract_iso ;;
            0)
                rm -f "$temp_file" 2>/dev/null
                echo "Goodbye!"
                exit 0
                ;;
            *)
                echo "Invalid choice!"
                sleep 1
                ;;
        esac
    done
}

# Start the program
main_menu
