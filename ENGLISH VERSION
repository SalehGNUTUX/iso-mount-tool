#!/bin/bash

# Initial settings
iso_dir="$HOME/iso"
mnt_dir="/mnt"
temp_file="/tmp/iso_selection.tmp"

# Enable case-insensitive matching
shopt -s nocasematch

# Function to display logo
display_logo() {
  echo -e "\033[1;36m"  # Cyan color
  cat << "EOF"
  ___
 |_ _|
  | |
  | |
 |___|       __  __
            |  \/  |
            | |\/| |
            | |  | |
            |_|  |_|        _____
                           |_   _|
                             | |
                             | |
                             |_|

EOF
  echo -e "\033[1;33m"  # Yellow color
  echo "Iso Mount tool by GNUTUX"
  echo -e "\033[0m"     # Reset color
  sleep 1
}

# Function to show mounted files
show_mounted() {
    clear
    display_logo
    echo "
    ==============================
    |   Currently Mounted Files  |
    ==============================
    "
    mounted=($(findmnt -n -l -o TARGET | grep "$mnt_dir"))

    if [ ${#mounted[@]} -eq 0 ]; then
        echo "    No files are currently mounted"
    else
        for ((i=0; i<${#mounted[@]}; i++)); do
            echo "    $((i+1)). ${mounted[$i]}"
        done
    fi

    echo "
    ==============================
    Press Enter to return...
    "
    read
}

# Function to unmount
unmount_iso() {
    while true; do
        clear
        display_logo
        mounted=($(findmnt -n -l -o TARGET | grep "$mnt_dir"))

        echo "
        ==============================
        |     Unmount ISO File      |
        ==============================
        | Currently Mounted Files: |
        "

        if [ ${#mounted[@]} -eq 0 ]; then
            echo "        No files are mounted"
        else
            for ((i=0; i<${#mounted[@]}; i++)); do
                echo "        $((i+1)). ${mounted[$i]}"
            done
        fi

        echo "
        ==============================
        | 1. Unmount file           |
        | 0. Back                   |
        ==============================
        "
        read -p "Choose an option [0-1]: " sub_choice

        case $sub_choice in
            1)
                if [ ${#mounted[@]} -gt 0 ]; then
                    read -p "Enter file number: " file_num
                    if [[ $file_num -ge 1 && $file_num -le ${#mounted[@]} ]]; then
                        sudo umount "${mounted[$((file_num-1))]}"
                        sudo rmdir "${mounted[$((file_num-1))]}"
                        echo "Successfully unmounted"
                        sleep 1
                    else
                        echo "Invalid number!"
                        sleep 1
                    fi
                else
                    echo "No files are mounted!"
                    sleep 1
                fi
                ;;
            0)
                return
                ;;
            *)
                echo "Invalid choice!"
                sleep 1
                ;;
        esac
    done
}

# Function to select ISO file
select_iso_file() {
    selected=$(zenity --file-selection \
        --title="Select ISO or IMG file" \
        --file-filter="Disk files | *.iso *.img *.ISO *.IMG" \
        --filename="$iso_dir/" 2>/dev/null)

    [ -z "$selected" ] && return 1

    iso_dir=$(dirname "$selected")
    echo "$selected" > "$temp_file"
}

# Main mount function
mount_iso() {
    while true; do
        clear
        display_logo
        echo "
        ==============================
        |        Mount ISO File      |
        ==============================
        | 1. Select ISO to mount     |
        | 2. Show mounted files     |
        | 0. Back                   |
        ==============================
        "
        read -p "Choose an option [0-2]: " choice

        case $choice in
            1)
                if select_iso_file; then
                    iso_path=$(cat "$temp_file")
                    mount_point="$mnt_dir/$(basename "$iso_path" | cut -d. -f1)"

                    sudo mkdir -p "$mount_point"
                    if sudo mount -o loop "$iso_path" "$mount_point"; then
                        zenity --info --text="File successfully mounted at: $mount_point" --width=300
                    else
                        zenity --error --text="Failed to mount file!" --width=200
                    fi
                fi
                ;;
            2)
                show_mounted
                ;;
            0)
                return
                ;;
            *)
                echo "Invalid choice!"
                sleep 1
                ;;
        esac
    done
}

# Main setup function
setup_iso_dir() {
    while true; do
        clear
        display_logo
        echo "
        ==============================
        |      ISO Folder Setup     |
        ==============================
        | 1. Create new ISO folder  |
        | 2. Open file manager      |
        | 0. Back                   |
        ==============================
        "
        read -p "Choose an option [0-2]: " sub_choice

        case $sub_choice in
            1)
                mkdir -p "$iso_dir"
                zenity --info --text="Created folder: $iso_dir" --width=200
                ;;
            2)
                xdg-open "$iso_dir" &
                ;;
            0)
                return
                ;;
            *)
                echo "Invalid choice!"
                sleep 1
                ;;
        esac
    done
}

# Main menu
main_menu() {
    while true; do
        clear
        display_logo
        echo -e "\033[1;34m"
        cat << "EOF"
┌──────────────────────────────────────┐
│   Advanced ISO/IMG Management Tool   │
│  With easy interface and full        │
│  features                            │
└──────────────────────────────────────┘
EOF
        echo "
        ==============================
        |     ISO Mounting Tool      |
        ==============================
        | Current ISO path: $iso_dir
        ==============================
        | 1. Setup ISO folder       |
        | 2. Mount ISO file         |
        | 3. Unmount ISO file       |
        | 4. Show mounted files      |
        | 0. Exit                    |
        ==============================
        "
        read -p "Choose an option [0-4]: " choice

        case $choice in
            1) setup_iso_dir ;;
            2) mount_iso ;;
            3) unmount_iso ;;
            4) show_mounted ;;
            0)
                rm -f "$temp_file" 2>/dev/null
                echo "Goodbye!"
                exit 0
                ;;
            *)
                echo "Invalid choice!"
                sleep 1
                ;;
        esac
    done
}

# Start the program
main_menu
